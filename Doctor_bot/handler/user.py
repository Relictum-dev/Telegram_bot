from aiogram import types
from create import dp, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboard.user_kb import welcome_kb, delete_kb, user_kb, rules_kb
from database import add_user_to_db
import database
from create import owm, mrg
from random import randint

# –°—Ç–µ–π—Ç –ø–æ–≥–æ–¥—ã
class In_weather(StatesGroup):
    city = State()


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–π—Ç–æ–≤
class Enter_data(StatesGroup):
    login = State()
    password = State()

class Examination(StatesGroup):
    user_login = State()
    user_password = State()

# –û–ø–∏—Å–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ [/start]
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {message.chat.first_name} \n' '\n'
    '–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º, –ø—Ä–æ—à—É –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –º–∏–Ω—É—Ç–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é' '\n' '\n'
    '–° —É–≤–∞–∂–µ–Ω–∏–µ–º - –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–≤–∏–Ω–∫', reply_markup= welcome_kb)

    
###### –û–ø–∏—Å–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤—Ö–æ–¥–∞ #######

# –ü–µ—Ä–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –≤—Ö–æ–¥–∞
@dp.message_handler(Text(equals='–í—Ö–æ–¥'), state=None)
async def enter(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω', reply_markup=delete_kb)
    await Examination.user_login.set()
 
 # –í—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –≤—Ö–æ–¥–∞
@dp.message_handler(state = Examination.user_login)
async def enter_1(message: types.Message, state = FSMContext):
    answer = message.text
    async with state.proxy() as data:
        data['login'] = answer
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup= delete_kb)
        await Examination.next()


#–¢—Ä–µ—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –≤—Ö–æ–¥–∞
@dp.message_handler(state= Examination.user_password)
async def enter_2(message: types.Message, state: FSMContext):

    data = await state.get_data()
    login = data.get('login')
    password = message.text

    if login == database.user_check_login(login) and password == database.user_check_password(password):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!')
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ')


    await state.finish()

##### –û–ø–∏—Å–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ######

# –ü–µ—Ä–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 
# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–µ–π—Ç–∞ = None
@dp.message_handler(Text(equals='–í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), state=None)
async def registration(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω', reply_markup=delete_kb)
    await Enter_data.login.set()

# –í—Ç–æ—Ä–æ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ = login
@dp.message_handler(state = Enter_data.login)
async def registration_1(message: types.Message, state= FSMContext):
    answer = message.text 
    if len(answer) <= 3:
        await message.answer('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–º')
        return registration_1
    elif len(answer) > 15:
        await message.answer ('–õ–æ–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤')
        return registration_1
    else:
        async with state.proxy() as data:
            data['login'] = answer
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup= delete_kb)
        await Enter_data.next()

# –¢—Ä–µ—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ = password
@dp.message_handler(state= Enter_data.password)
async def registration_2(message: types.Message, state: FSMContext):

    data = await state.get_data()
    login = data.get('login')
    password = message.text
    if not (await database.user_exists(message.from_user.id)):
        await add_user_to_db(user_id=message.from_user.id, login=login, password=password)
        await message.answer('–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, ' + message.chat.first_name, reply_markup= user_kb)
    else:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + message.chat.first_name, reply_markup=user_kb)

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    await state.finish()


dp.message_handler(Text(equals= 'üå¶ –ü–æ–≥–æ–¥–∞'), state= None)
async def weather(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    await In_weather.city.set()

@dp.message_handler(state = In_weather.city)
async def weather_print(message: types.Message, state = FSMContext):
    answer = message.text
    try:
        async with state.proxy() as data:
            data['city'] = answer
            observation = mrg.weather_at_place(answer)
            weather = observation.weather
            await message.answer('–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ' + answer + ':' '\n' '\n'
            '*---–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è---*' '\n' '\n'
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: ' '\n' + str(weather.temperature('celsius')['temp']) + '¬∞C' '\n' '\n'
            '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:' '\n' + str(weather.wind()['speed']) + ' –º/—Å' '\n' '\n' 
            '*--------------------------*',
            parse_mode='Markdown')
            await state.finish()
    except:
        await message.answer('–£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.message_handler(Text(equals='üé≤ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä'))
async def randomizer(message: types.Message):
    random_number = randint(1,10)
    await message.answer('–í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:' '\n' + str(random_number))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥—Ä–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ–∞–π–ª starting
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands = ['start'])
    dp.register_message_handler(registration, Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
    dp.register_message_handler(registration_1, state= Enter_data.login)
    dp.register_message_handler(registration_2, state= Enter_data.password)
    dp.register_message_handler(enter, Text(equals='–í—Ö–æ–¥'))
    dp.register_message_handler(weather, Text(equals= 'üå¶ –ü–æ–≥–æ–¥–∞'))
    dp.register_message_handler(randomizer, Text(equals='üé≤ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä'))
